generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String
  userId            String    @unique
  isPhoneVerified   Boolean   @default(false)
  phoneNumber       String?
  coverImage        String?
  profileImage      String?
  location          String?
  bio               String?
  mood              String?
  ambience          String[]
  cuisines          String[]
  languages         String[]
  dateOfBirth       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  notificationToken String?

  EventInvitation EventInvitation[]

  Event Event[]

  UserImages UserImages[]

  RefrencesNotification Notifications[] @relation("refrence")

  Notifications Notifications[] @relation("profile")
}

model Restaurant {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String? // Optional description of the restaurant
  location         String?
  city             String?
  state            String?
  zipCode          String?
  country          String?
  phone            String?
  email            String? // Optional email
  website          String? // Optional website link
  openingTime      DateTime
  closingTime      DateTime
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  menuItems        String[] // Relation to menu items
  ambience         String[]
  cuisines         String[]
  RestaurantImages RestaurantImages[]

  Event Event[]
}

model RestaurantImages {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model UserImages {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @db.ObjectId
  profile   Profile         @relation(fields: [userId], references: [id])
  image     String
  type      UserImagesTypes @default(PERSONAL)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Event {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  description           String?
  date                  DateTime
  eventType             EVENTTYPE      @default(ATHOME)
  location              String?
  resturantId           String?        @db.ObjectId
  restaurant            Restaurant?    @relation(fields: [resturantId], references: [id])
  cuisine               String[]
  ambience              String[]
  houseRules            String[]
  desert                String[]
  time                  String?        @default("now")
  afterDinnerActivities String[]
  priceType             EVENTPRICETYPE @default(FULL)
  gifts                 String[]
  status                EVENTSTATUS    @default(PENDING)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  profileId             String         @db.ObjectId

  profile Profile @relation(fields: [profileId], references: [id])

  EventInvitation EventInvitation[]
}

model EventInvitation {
  id        String                @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String?               @db.ObjectId
  Event     Event?                @relation(fields: [eventId], references: [id])
  profileId String?               @db.ObjectId
  profile   Profile?              @relation(fields: [profileId], references: [id])
  status    EVENTINVITATIONSTATUS @default(PENDING)
}

model Notifications {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId   String?  @db.ObjectId
  Profile     Profile? @relation(name: "profile", fields: [profileId], references: [id])
  subject     String?
  description String?
  refrenceId  String?  @db.ObjectId
  refrence    Profile? @relation(name: "refrence", fields: [refrenceId], references: [id])
  isSystem    Boolean  @default(true)
  isReaded    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserImagesTypes {
  PERSONAL
  DINNER
  HOME
}

enum EVENTTYPE {
  ATRESTURANT
  ATHOME
}

enum EVENTPRICETYPE {
  SPLIT
  FULL
}

enum EVENTSTATUS {
  PENDING
  CANCELLED
}

enum EVENTINVITATIONSTATUS {
  PENDING
  REJECTED
  ACCEPTED
}
