generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String
  userId            String    @unique
  isPhoneVerified   Boolean   @default(false)
  phoneNumber       String?
  coverImage        String?
  profileImage      String?
  location          String?
  gender            String?
  bio               String?
  mood              String?
  maritalStatus     String?
  price             Int       @default(0)
  ambience          String[]
  cuisines          String[]
  languages         String[]
  dateOfBirth       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  notificationToken String?

  Event Event[]

  UserImages UserImages[]

  RefrencesNotification Notifications[] @relation("refrence")

  Notifications   Notifications[] @relation("profile")
  hostInvitations EventRequest[]  @relation("host")
  UserInvitations EventRequest[]  @relation("user")
  EventInvitation EventRequest[]

  MyReviews Review[] @relation(name: "recipient")

  GivenReviews Review[] @relation(name: "profile")

  Wishlist Wishlist[]
}

model Restaurant {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String? // Optional description of the restaurant
  location         String?
  price            Int?
  city             String?
  state            String?
  zipCode          String?
  country          String?
  phone            String?
  email            String? // Optional email
  website          String? // Optional website link
  openingTime      DateTime
  closingTime      DateTime
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  menuItems        String[] // Relation to menu items
  ambience         String[]
  cuisines         String[]
  RestaurantImages RestaurantImages[]

  Event Event[]
}

model RestaurantImages {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model EventImages {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  eventId String? @db.ObjectId
  event   Event?  @relation(fields: [eventId], references: [id])
}

model UserImages {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @db.ObjectId
  profile   Profile         @relation(fields: [userId], references: [id])
  image     String
  type      UserImagesTypes @default(PERSONAL)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Event {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  description           String?
  date                  DateTime
  eventType             EVENTTYPE      @default(ATHOME)
  location              String?
  resturantId           String?        @db.ObjectId
  restaurant            Restaurant?    @relation(fields: [resturantId], references: [id])
  cuisine               String[]
  ambience              String[]
  houseRules            String[]
  desert                String[]
  numberofGuests        String?
  gifts                 String[]
  time                  String?        @default("now")
  afterDinnerActivities String[]
  priceType             EVENTPRICETYPE @default(FULL)
  status                EVENTSTATUS    @default(PENDING)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  profileId             String         @db.ObjectId

  profile Profile @relation(fields: [profileId], references: [id])

  EventInvitation EventRequest[]
  EventImages     EventImages[]
  Wishlist        Wishlist[]
}

model EventRequest {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  eventId       String?               @db.ObjectId
  Event         Event?                @relation(fields: [eventId], references: [id])
  profileId     String?               @db.ObjectId
  hostId        String?               @db.ObjectId
  profile       Profile?              @relation("user", fields: [profileId], references: [id])
  host          Profile?              @relation("host", fields: [hostId], references: [id])
  status        EVENTINVITATIONSTATUS @default(PENDING)
  Profile       Profile?              @relation(fields: [profileId], references: [id])
  Notifications Notifications[]
}

model Notifications {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  profileId   String?       @db.ObjectId
  Profile     Profile?      @relation(name: "profile", fields: [profileId], references: [id])
  subject     String?
  description String?
  type        String?
  refrenceId  String?       @db.ObjectId
  requestId   String?       @db.ObjectId
  request     EventRequest? @relation(fields: [requestId], references: [id])
  refrence    Profile?      @relation(name: "refrence", fields: [refrenceId], references: [id])
  isSystem    Boolean       @default(true)
  isReaded    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int?     @default(5)
  comment     String?
  recipientId String?  @db.ObjectId
  recipient   Profile? @relation(name: "recipient", fields: [recipientId], references: [id])
  profileId   String?  @db.ObjectId
  Profile     Profile? @relation(name: "profile", fields: [profileId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId String?  @db.ObjectId
  Profile   Profile? @relation(fields: [profileId], references: [id])
  eventId   String?  @db.ObjectId
  Event     Event?   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserImagesTypes {
  PERSONAL
  DINNER
  HOME
}

enum EVENTTYPE {
  ATRESTURANT
  ATHOME
}

enum EVENTPRICETYPE {
  SPLIT
  FULL
}

enum EVENTSTATUS {
  PENDING
  CANCELLED
}

enum EVENTINVITATIONSTATUS {
  PENDING
  REJECTED
  ACCEPTED
  CANCELLED
}
